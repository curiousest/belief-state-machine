name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      backend_image: ${{ steps.build_backend.outputs.image }}
      frontend_image: ${{ steps.build_frontend.outputs.image }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Backend Docker Image
        id: build_backend
        run: |
          BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ secrets.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          LATEST_BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ secrets.BACKEND_ECR_REPOSITORY }}:latest
          echo "BACKEND_IMAGE=$BACKEND_IMAGE" >> $GITHUB_ENV
          echo "LATEST_BACKEND_IMAGE=$LATEST_BACKEND_IMAGE" >> $GITHUB_ENV
          cd backend
          docker build -t $BACKEND_IMAGE .
          docker tag $BACKEND_IMAGE $LATEST_BACKEND_IMAGE

      - name: Run backend tests
        run: |
          docker run --rm ${{ env.BACKEND_IMAGE }} uv run python manage.py test
      
      - name: Build Frontend Docker Image
        id: build_frontend
        run: |
          FRONTEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ secrets.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV
          cd frontend
          docker build -t $FRONTEND_IMAGE .

      - name: Run frontend tests
        run: |
          docker run --rm ${{ env.FRONTEND_IMAGE }} npm test -- --watchAll=false

      - name: Push Backend Docker Image
        run: |
          docker push ${{ env.BACKEND_IMAGE }}
          docker push ${{ env.LATEST_BACKEND_IMAGE }}

      - name: Push Frontend Docker Image
        run: |
          docker push ${{ env.FRONTEND_IMAGE }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        env:
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_crewai_api_key: ${{ secrets.CREWAI_API_KEY }}
        run: terraform plan -lock=false

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_crewai_api_key: ${{ secrets.CREWAI_API_KEY }}
        run: terraform apply -auto-approve

      # Build and push Docker images to ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # log in to awscli
      - name: Log in to AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_DEFAULT_REGION }}

      # List ECS Clusters for debugging
      - name: List ECS Clusters
        run: aws ecs list-clusters --region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Verify AWS CLI Version
        run: aws --version
   
      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      # Update ECS services using hardcoded values
      - name: Update ECS services
        run: |
          aws ecs update-service --cluster belief-state-machine-cluster --service belief-state-machine-frontend-service --force-new-deployment --region ${{ secrets.AWS_DEFAULT_REGION }}
          aws ecs update-service --cluster belief-state-machine-cluster --service belief-state-machine-backend-service --force-new-deployment --region ${{ secrets.AWS_DEFAULT_REGION }}
