name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      backend_image: ${{ steps.build_backend.outputs.image }}
      frontend_image: ${{ steps.build_frontend.outputs.image }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Backend Docker Image
        id: build_backend
        run: |
          BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ secrets.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          echo "BACKEND_IMAGE=$BACKEND_IMAGE" >> $GITHUB_ENV
          cd backend
          docker build -t $BACKEND_IMAGE .

      - name: Run backend tests
        run: |
          docker run --rm ${{ env.BACKEND_IMAGE }} uv run python manage.py test
      
      - name: Build Frontend Docker Image
        id: build_frontend
        run: |
          FRONTEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ secrets.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV
          cd frontend
          docker build -t $FRONTEND_IMAGE .

      - name: Run frontend tests
        run: |
          docker run --rm ${{ env.FRONTEND_IMAGE }} npm test -- --watchAll=false

      - name: Push Backend Docker Image
        run: |
          docker push ${{ env.BACKEND_IMAGE }}

      - name: Push Frontend Docker Image
        run: |
          docker push ${{ env.FRONTEND_IMAGE }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_crewai_api_key: ${{ secrets.CREWAI_API_KEY }}
        run: terraform apply -auto-approve

      # Build and push Docker images to ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Add a step to capture terraform outputs
      - name: Get Terraform outputs
        id: terraform-output
        working-directory: ./terraform
        run: |
          echo "frontend_ecr_repository_url=$(terraform output -raw frontend_ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "backend_ecr_repository_url=$(terraform output -raw backend_ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
          echo "frontend_service_name=$(terraform output -raw frontend_service_name)" >> $GITHUB_OUTPUT
          echo "backend_service_name=$(terraform output -raw backend_service_name)" >> $GITHUB_OUTPUT

      # Update ECS services using the captured outputs
      - name: Update ECS services
        run: |
          aws ecs update-service --cluster ${{ steps.terraform-output.outputs.ecs_cluster_name }} --service ${{ steps.terraform-output.outputs.frontend_service_name }} --force-new-deployment
          aws ecs update-service --cluster ${{ steps.terraform-output.outputs.ecs_cluster_name }} --service ${{ steps.terraform-output.outputs.backend_service_name }} --force-new-deployment
